# Test of the internal load balancer template.

imports:
  - path: templates/internal_load_balancer/internal_load_balancer.py
    name: internal_load_balancer.py


resources:
  - name: ${ILB_RES_NAME}
    type: internal_load_balancer.py
    properties:
      protocol: ${PROTOCOL}
      region: ${REGION}
      name: ${ILB_NAME}
      description: ${ILB_DESCRIPTION}
      ports:
        - ${ILB_PORT}
      network: $(ref.${NETWORK_NAME}.selfLink)
      backendService:
        name: ${BS_NAME}
        description: ${BS_DESCRIPTION}
        timeoutSec: ${TIMEOUT}
        healthCheck: $(ref.${HC_NAME}.selfLink)
        sessionAffinity: ${BS_AFFINITY}
        connectionDraining:
          drainingTimeoutSec: ${BS_DRAINING}
        backends:
          - group: $(ref.${IGM_NAME}.instanceGroup)
            description: ${BACKEND_DESCRIPTION}

# Test prerequisites.
  - name: ${IGM_NAME}
    type: compute.v1.regionInstanceGroupManager
    properties:
      instanceTemplate: $(ref.instance-template-${RAND}.selfLink)
      region: ${REGION}
      targetSize: 3

  - name: instance-template-${RAND}
    type: compute.v1.instanceTemplate
    properties:
      properties:
        machineType: f1-micro
        disks:
          - autoDelete: true
            boot: true
            deviceName: boot
            initializeParams:
              sourceImage: projects/ubuntu-os-cloud/global/images/family/ubuntu-1804-lts
            type: PERSISTENT
        networkInterfaces:
          - accessConfigs:
            - name: External NAT
              type: ONE_TO_ONE_NAT
            network: $(ref.test-network-${RAND}.selfLink)
        metadata:
          items:
            - key: startup-script
              value: sudo apt-get update && sudo apt-get install -y nginx

  - name: ${NETWORK_NAME}
    type: compute.v1.network
    properties:
      autoCreateSubnetworks: true

  - name: ${HC_NAME}
    type: compute.v1.healthCheck
    properties:
      type: TCP
      tcpHealthCheck:
        port: ${ILB_PORT}
