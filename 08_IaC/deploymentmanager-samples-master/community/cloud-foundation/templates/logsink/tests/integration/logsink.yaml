# Test of the logsink template.
#
# Variables:
#   RAND: A random string used by the testing suite.
#

imports:
  - path: templates/logsink/logsink.py
    name: logsink.py

resources:
  # Project sink with bucket destination
  - name: test-logsink-project-storage-${RAND}
    type: logsink.py
    properties:
      projectId: ${CLOUD_FOUNDATION_PROJECT_ID}
      destinationName: test-bucket-${RAND}
      destinationType: storage
      uniqueWriterIdentity: true

  # Project sink with pubsub destination
  - name: test-logsink-project-pubsub-${RAND}
    type: logsink.py
    properties:
      projectId: ${CLOUD_FOUNDATION_PROJECT_ID}
      destinationName: test-topic-${RAND}
      destinationType: pubsub
      uniqueWriterIdentity: true

  # Project sink with bq destination
  - name: test-logsink-project-bq-${RAND}
    type: logsink.py
    properties:
      projectId: ${CLOUD_FOUNDATION_PROJECT_ID}
      destinationName: test_dataset_${RAND}
      destinationType: bigquery
      uniqueWriterIdentity: true

  # Organization sink with bucket destination
  - name: test-logsink-org-storage-${RAND}
    type: logsink.py
    properties:
      orgId: ${CLOUD_FOUNDATION_ORGANIZATION_ID}
      destinationName: test-bucket-${RAND}
      destinationType: storage
      uniqueWriterIdentity: true

  # Organization sink with pubsub destination
  - name: test-logsink-org-pubsub-${RAND}
    type: logsink.py
    properties:
      orgId: ${CLOUD_FOUNDATION_ORGANIZATION_ID}
      destinationName: test-topic-${RAND}
      destinationType: pubsub
      uniqueWriterIdentity: true

  # Organization sink with bq destination
  - name: test-logsink-org-bq-${RAND}
    type: logsink.py
    properties:
      orgId: ${CLOUD_FOUNDATION_ORGANIZATION_ID}
      destinationName: test_dataset_${RAND}
      destinationType: bigquery
      uniqueWriterIdentity: true

  # Billing Account sink with bucket destination
  - name: test-logsink-billing-storage-${RAND}
    type: logsink.py
    properties:
      billingAccountId: ${CLOUD_FOUNDATION_BILLING_ACCOUNT_ID}
      destinationName: test-bucket-${RAND}
      destinationType: storage
      uniqueWriterIdentity: true

  # Billing Account sink with pubsub destination
  - name: test-logsink-billing-pubsub-${RAND}
    type: logsink.py
    properties:
      billingAccountId: ${CLOUD_FOUNDATION_BILLING_ACCOUNT_ID}
      destinationName: test-topic-${RAND}
      destinationType: pubsub
      uniqueWriterIdentity: true

  # Billing Account sink with bq destination
  - name: test-logsink-billing-bq-${RAND}
    type: logsink.py
    properties:
      billingAccountId: ${CLOUD_FOUNDATION_BILLING_ACCOUNT_ID}
      destinationName: test_dataset_${RAND}
      destinationType: bigquery
      uniqueWriterIdentity: true

  # Folder sink with bucket destination
  - name: test-logsink-folder-storage-${RAND}
    type: logsink.py
    properties:
      folderId: ${TEST_ORG_FOLDER_NAME}
      destinationName: test-bucket-${RAND}
      destinationType: storage
      uniqueWriterIdentity: true

  # Folder sink with pubsub destination
  - name: test-logsink-folder-pubsub-${RAND}
    type: logsink.py
    properties:
      folderId: ${TEST_ORG_FOLDER_NAME}
      destinationName: test-topic-${RAND}
      destinationType: pubsub
      uniqueWriterIdentity: true

  # Folder sink with bq destination
  - name: test-logsink-folder-bq-${RAND}
    type: logsink.py
    properties:
      folderId: ${TEST_ORG_FOLDER_NAME}
      destinationName: test_dataset_${RAND}
      destinationType: bigquery
      uniqueWriterIdentity: true

  # Project sink creating pubsub destination
  - name: test-logsink-project-pubsub-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-project-pubsub-dest-${RAND}
      destinationType: pubsub
      projectId: ${CLOUD_FOUNDATION_PROJECT_ID}
      uniqueWriterIdentity: true
      pubsubProperties:
        topic: test-logsink-project-pubsub-topic-dest-${RAND}
        accessControl:
          - role: roles/pubsub.admin
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Project sink creating bucket destination
  - name: test-logsink-project-storage-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-project-storage-dest-${RAND}
      destinationType: storage
      projectId: ${CLOUD_FOUNDATION_PROJECT_ID}
      uniqueWriterIdentity: true
      storageProperties:
        location: us-east1
        bindings:
          - role: roles/storage.objectViewer
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Project sink creating a bq destination
  # NOTE: There is a issue where BQ does not accept the uniqueWriter
  # returned by the logsink to be used in the userByEmail property.
  # Until that is resolved, this property is not supported.
  # - name: test-logsink-project-bq-create-${RAND}
  #   type: logsink.py
  #   properties:
  #     # BQ names use underscores
  #     destinationName: test_logsink_project_bq_dest_${RAND}
  #     destinationType: bigquery
  #     projectId: ${CLOUD_FOUNDATION_PROJECT_ID}
  #     uniqueWriterIdentity: true
  #     bqProperties:
  #       location: US
  #       access:
  #         - role: OWNER
  #           userByEmail: ${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Organization sink creating pubsub destination
  - name: test-logsink-org-pubsub-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-org-pubsub-dest-${RAND}
      destinationType: pubsub
      orgId: ${CLOUD_FOUNDATION_ORGANIZATION_ID}
      uniqueWriterIdentity: true
      pubsubProperties:
        topic: test-logsink-org-pubsub-topic-dest-${RAND}
        accessControl:
          - role: roles/pubsub.admin
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Organization sink creating bucket destination
  - name: test-logsink-org-storage-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-org-storage-dest-${RAND}
      destinationType: storage
      orgId: ${CLOUD_FOUNDATION_ORGANIZATION_ID}
      uniqueWriterIdentity: true
      storageProperties:
        location: us-east1
        bindings:
          - role: roles/storage.objectViewer
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Organization sink creating bq destination
  # NOTE: There is a issue where BQ does not accept the uniqueWriter
  # returned by the logsink to be used in the userByEmail property.
  # Until that is resolved, this property is not supported.
  # - name: test-logsink-org-bq-create-${RAND}
  #   type: logsink.py
  #   properties:
  #     # BQ names use underscores
  #     destinationName: test_logsink_org_bq_dest_${RAND}
  #     destinationType: bigquery
  #     orgId: ${CLOUD_FOUNDATION_ORGANIZATION_ID}
  #     uniqueWriterIdentity: true
  #     bqProperties:
  #       location: US
  #       access:
  #         - role: OWNER
  #           userByEmail: ${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Billing Account sink creating pubsub destination
  - name: test-logsink-billing-pubsub-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-billing-pubsub-dest-${RAND}
      destinationType: pubsub
      billingAccountId: ${CLOUD_FOUNDATION_BILLING_ACCOUNT_ID}
      uniqueWriterIdentity: true
      pubsubProperties:
        topic: test-logsink-billing-pubsub-topic-dest-${RAND}
        accessControl:
          - role: roles/pubsub.admin
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Billing Account sink creating bucket destination
  - name: test-logsink-billing-storage-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-billing-storage-dest-${RAND}
      destinationType: storage
      billingAccountId: ${CLOUD_FOUNDATION_BILLING_ACCOUNT_ID}
      uniqueWriterIdentity: true
      storageProperties:
        location: us-east1
        bindings:
          - role: roles/storage.objectViewer
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Billing Account sink creating bq destination
  # NOTE: There is a issue where BQ does not accept the uniqueWriter
  # returned by the logsink to be used in the userByEmail property.
  # Until that is resolved, this property is not supported.
  # - name: test-logsink-billing-bq-create-${RAND}
  #   type: logsink.py
  #   properties:
  #     # BQ names use underscores
  #     destinationName: test_logsink_billing_bq_dest_${RAND}
  #     destinationType: bigquery
  #     billingAccountId: ${CLOUD_FOUNDATION_BILLING_ACCOUNT_ID}
  #     uniqueWriterIdentity: true
  #     bqProperties:
  #       name: test_logsink_billing_bq_dest_${RAND}
  #       location: US
  #       access:
  #         - role: OWNER
  #           userByEmail: ${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Folder sink creating pubsub destination
  - name: test-logsink-folder-pubsub-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-folder-pubsub-dest-${RAND}
      destinationType: pubsub
      folderId: ${TEST_ORG_FOLDER_NAME}
      uniqueWriterIdentity: true
      pubsubProperties:
        topic: test-logsink-folder-pubsub-topic-dest-${RAND}
        accessControl:
          - role: roles/pubsub.admin
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Folder sink creating bucket destination
  - name: test-logsink-folder-storage-create-${RAND}
    type: logsink.py
    properties:
      destinationName: test-logsink-folder-storage-dest-${RAND}
      destinationType: storage
      folderId: ${TEST_ORG_FOLDER_NAME}
      uniqueWriterIdentity: true
      storageProperties:
        location: us-east1
        bindings:
          - role: roles/storage.objectViewer
            members:
              - user:${CLOUD_FOUNDATION_USER_ACCOUNT}

  # Folder sink creating bq destination
  # NOTE: There is a issue where BQ does not accept the uniqueWriter
  # returned by the logsink to be used in the userByEmail property.
  # Until that is resolved, this property is not supported.
  # - name: test-logsink-folder-bq-create-${RAND}
  #   type: logsink.py
  #   properties:
  #     # BQ names use underscores
  #     destinationName: test_logsink_folder_bq_dest_${RAND}
  #     destinationType: bigquery
  #     folderId: ${TEST_ORG_FOLDER_NAME}
  #     uniqueWriterIdentity: true
  #     bqProperties:
  #       location: US
  #       access:
  #         - role: OWNER
  #           userByEmail: ${CLOUD_FOUNDATION_USER_ACCOUNT}
